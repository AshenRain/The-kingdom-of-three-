import javax.swing.*;
import java.util.Vector;

public class Info{

    // Vector fields = new Vector();
    // Vector fieldsCoordinates = new Vector(); 
    // Vector characters = new Vector();
    // Vector coordinates = new Vector();
    
    ArrayList<Field> fields = new ArrayList<Field>();
    ArrayList<int> fieldsCoordinates = new ArrayList<int>(); // хранит координаты полей, нужен только для старта при создании поля
    ArrayList<Character> fields = new ArrayList<Character>();
    

    Player N1 = new Player();
    Player N2 = new Player();
    Player N3 = new Player();

    // Зона 1
    fieldsCoordinates.add(1111);//Это
    fieldsCoordinates.add(1221);//База 
    fieldsCoordinates.add(1331);//Игрока
    fieldsCoordinates.add(1441);//Это тоже
    fieldsCoordinates.add(1112);
    fieldsCoordinates.add(1222);
    fieldsCoordinates.add(1332);
    fieldsCoordinates.add(1442);
    fieldsCoordinates.add(1113);
    fieldsCoordinates.add(1223);
    fieldsCoordinates.add(1333);
    fieldsCoordinates.add(1443);
    
    // Зона 2
    fieldsCoordinates.add(2131);//Это
    fieldsCoordinates.add(2232);//База 
    fieldsCoordinates.add(2333);//Игрока
    fieldsCoordinates.add(2434);//Это тоже
    fieldsCoordinates.add(2124);
    fieldsCoordinates.add(2223);
    fieldsCoordinates.add(2322);
    fieldsCoordinates.add(2421);
    fieldsCoordinates.add(2114);
    fieldsCoordinates.add(2213);
    fieldsCoordinates.add(2312);
    fieldsCoordinates.add(2411);
    
    // Зона 3
    fieldsCoordinates.add(3111);//Это
    fieldsCoordinates.add(3122);//База 
    fieldsCoordinates.add(3133);//Игрока
    fieldsCoordinates.add(3144);//Это тоже
    fieldsCoordinates.add(3211);
    fieldsCoordinates.add(3222);
    fieldsCoordinates.add(3233);
    fieldsCoordinates.add(3244);
    fieldsCoordinates.add(3311);
    fieldsCoordinates.add(3322);
    fieldsCoordinates.add(3333);
    fieldsCoordinates.add(3344);

    // Зона 4
    fieldsCoordinates.add(4114);
    fieldsCoordinates.add(4213);
    fieldsCoordinates.add(4312);
    fieldsCoordinates.add(4411);
    fieldsCoordinates.add(4214);
    fieldsCoordinates.add(4313);
    fieldsCoordinates.add(4412);
    fieldsCoordinates.add(4224);
    fieldsCoordinates.add(4323);
    fieldsCoordinates.add(4422);
    fieldsCoordinates.add(4324);
    fieldsCoordinates.add(4423);
    fieldsCoordinates.add(4334);
    fieldsCoordinates.add(4433);
    fieldsCoordinates.add(4434);
    fieldsCoordinates.add(4444);

}



public class MathModule {


    // добавить экземпляр класса поле с наименованием home
    // добавить флажек для определения ходила фигура или нет в класс Character

    /// START
    void Start(Info Base){
        for (int i = 0; i<=55; i++){
             Base.fields.add(Fabric_Field.createField());
             Base.fields.get(i).coordinate = Base.fieldsCoordinates[i];
             // добавить бонусные зоны
        }
        
        
        
        
        
        // открытие окна игрока, который ходит
    }















    /// PLAYER COMMAND

    void PlayerMovement(Info Base)
    {
        // открывыется окно и печатается список фигур, которые не ходили
        // игрок выбирает юнита {запускается окно с выбором фигуры и игрок выбирает нужную)
        // после выбора запускается окно выбора дейстивий юнита (находится в классе character) c двумя метода
    }


    void PlayerKingdomSkill(Info Base, int skill) // скил при обороне замка
    {
        // на стадии концепции
    }

    void PlayerCallUnit(Info Base, int unit) // выбор юнита для призыва
    {
        // открывается окно выбора юнита для призыва
    }

    void PlayerEndMove(Info Base)
    {
        // перед передачей проверяется, остались ли фигуры, которые не подходили
        for(int i=0; i <= Base.characters.size(); i++){
            if(Base.characters.) // проверяется принадлежность фигуры к нужному игроку и ходила ли она
            {
                // выводиться диалоговое окно с сообщением о том что данная фигура ниходила,
                // на выбор предлогается кнопка которая октрывает окно действий для нанной фигуры
                // и окно с возможностью продолжить
            }
        }

    }

    /// CHARACTER COMMAND

    void CharacterMove(Info Base, int field_code) // передается код ячейки куда хочет перейти фигура
    {
        // проверка не занята ли ячейка
        // проверка соседняя ли это ячейка (3 формулы из теор. базиса.)
        // передвижение в нужную ячейку
    }

    void CharacterAttack(Info Base, int field_code) // передается код ячейки куда хочет напасть фигура
    {
        // проверка есть ли кто-то в ячейке, и враг ли это
        // просчет получения урона
        // удаление юнитов, у которых закончились жизни
    }

    /// FIELD COMMAND

    // у поля нет комманд ;)
}
